@page "/room/{roomId}"
@using Microsoft.AspNetCore.SignalR.Client
@using SimpleChat.Client.BlazorApp.Const
@using System.Linq
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ILocalStorageService _localStorageService
@inject IRoomService _roomService
@inject IToastService _toastService
@implements IAsyncDisposable
@attribute [Authorize]

<h3>Room: @_roomService.Rooms.Single(x => x.Id.ToString() == RoomId).Name</h3>

<div class="form-group">
    <label>
        User: @_userName
    </label>
</div>
<EditForm Model="_messages" OnValidSubmit="Send">
    <div class="form-group">
        <label>
            Message:
            <input @bind="_messageInput" size="50"/>
        </label>
    </div>
    <button type="submit" disabled="@(!IsConnected)" class="btn btn-primary">Send</button>
</EditForm>
<hr>

<ul id="messagesList">
    @foreach (var message in _messages)
    {
        <li>@message</li>
    }
</ul>

@code {

    [Parameter]
    public string? RoomId { get; set; }

    private HubConnection? _hubConnection;
    private readonly List<string> _messages = new();
    private string? _userName;
    private string? _messageInput;
    private string? _accessToken;

    protected override async Task OnParametersSetAsync()
    {
        _messages.Clear();
        var msg = await _roomService.GetMessages(RoomId);
        foreach (var messageResponse in msg)
            _messages.Add($"{messageResponse.CreatedAt:g} - {messageResponse.UserName}: {messageResponse.Text}");

        if (_hubConnection is not null)
        {
            if (_hubConnection?.State == HubConnectionState.Connected)
                await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/chathub"), options => { options.AccessTokenProvider = () => Task.FromResult(_accessToken.Replace("\"", ""))!; })
            .Build();

        _hubConnection.On<DateTime, string, string>(RoomId, (createdAt, userName, message) =>
        {
            if (message.First() == '/')
                return;

            var newMessage = $"{createdAt:g} - {userName}: {message}";
            _messages.Add(newMessage);
            if (_messages.Count > 50)
                _messages.RemoveAt(0);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    protected override async Task OnInitializedAsync()
    {
        var state = await _authenticationStateProvider.GetAuthenticationStateAsync();
        _userName = state.User.Identity?.Name;

        _accessToken = await _localStorageService.GetItemAsStringAsync(AuthConst.AccessToken);
    }

    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(_messageInput))
        {
            _toastService.ShowWarning("Message is empty");
            return;
        }

        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("SendMessage", RoomId, DateTime.UtcNow, _messageInput);
            _messageInput = string.Empty;
            StateHasChanged();
        }
    }

    private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }

}