@page "/rooms"
@using Microsoft.AspNetCore.SignalR.Client
@using SimpleChat.Client.BlazorApp.Const
@inject NavigationManager _navigationManager
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ILocalStorageService _localStorageService
@implements IAsyncDisposable
@attribute [Authorize]

<h3>Rooms</h3>

<div class="form-group">
    <label>
        User: @_userName
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="_messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in _messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? _hubConnection;
    private readonly List<string> _messages = new();
    private string? _userName;
    private string? _messageInput;

    protected override async Task OnInitializedAsync()
    {
        var state = await _authenticationStateProvider.GetAuthenticationStateAsync();
        _userName = state.User.Identity.Name;

        var accessToken = await _localStorageService.GetItemAsStringAsync(AuthConst.AccessToken);
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri("/chathub"), options =>
            {
                options.AccessTokenProvider = () => Task.FromResult(accessToken.Replace("\"", ""))!;
            })
            .Build();

        _hubConnection.On<string, string>("Minha Sala", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            _messages.Add(encodedMsg);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.SendAsync("SendMessage", "Minha Sala", _userName, _messageInput);
        }
    }

    private bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}